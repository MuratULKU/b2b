@page "/cart"
@using B2B.Components.Confirm
@using B2B.Components.SanalMagazaUI.InputNumber
@using B2B.Data;
@using Business.Abstract;
@using Business.Concrete;
@using DataAccess.Abstract;
@using Entity;
@inject IOrderService orderService
@inject UserManager userService
@inject IFirmParamService firmParamService
@inject IProductRepository _productRepository
@inject NavigationManager navManager
@attribute [Authorize]
@if (baskets != null)
{
    <div class="container">
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Görsel</th>
                        <th>Ürün</th>
                        <th>Stok</th>
                        <th>KDV</th>
                        <th>Miktar</th>
                        <th>Birim Fiyat</th>
                        <th>Tutar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in baskets)
                    {
                        <tr>
                            <td>Görsel</td>
                            <td>@item.ProductName</td>
                            <td class="text-right">
                                <InputIntNumber @bind-Value="@item.Amount"
                                                Change="@((e)=>change(e,item))"></InputIntNumber>
                            </td>
                            <td class="text-right">@item.VatRate</td>
                            <td>Stok Miktarı</td>
                            <td class="text-right">@item.Price.ToString("N2")</td>
                            <td class="text-right">@item.Total.ToString("N2")</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="row">
                <div class="col-md-7" style="margin-top:20px;">
                    <label>Açıklama</label>
                    <input class="form-control" type="text" @bind-value="explanation">
                </div>
                <div class="col-md-5">
                    <table class="table">
                        <thead>
                            <tr class="text-left">
                                <th class="text-left">Alt Toplam</th>
                                <th class="text-left">Tutar</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr style="width:200px;">
                                <td class="text-left">Ara Toplam</td>
                                <td class="text-right">@baskets.Sum(x=>x.Total).ToString("N2")</td>
                            </tr>
                            <tr>
                                <td class="text-left">Vergi Tutarı</td>
                                <td class="text-right">@baskets.Sum(x=>x.VatPrice).ToString("N2")</td>
                            </tr>
                            <tr>
                                <td class="text-left">Genel Toplam</td>
                                <td class="text-right">@baskets.Sum(x=>x.Total + x.VatPrice).ToString("N2")</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div>
            <div class="row">
                <div class="col-7">
                    <button class="btn btn-primary" onclick="@basketUpdate">Sepeti Güncelle</button>
                    <button class="btn btn-primary" onclick="@BasketDelete">Sepeti Boşalt</button>
                </div>
                <div class="col-5" style="text-align:right;">
                    <Button Color="Blazorise.Color.Success" Clicked="@SendData" Disabled="firmParamService.ToBoolean(16)">Siparişi Tamamla</Button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <label>Sepet Boş</label>
}

<Confirm @ref="ConfirmRef" ConfirmationChanged="ConfirmDeleteBasket" />


@code {
    private List<Basket> baskets { get; set; }
    private Basket selectedBasket;
    private Confirm ConfirmRef;
    private string explanation;
    private double amount { get; set; }

    protected override Task OnParametersSetAsync()
    {
        baskets = orderService.GetAll(userService.User).Where(x => x.Send == false).ToList();
        foreach (var basket in baskets) //daha sonra servise taşınacak
        {
            Product product = _productRepository.GetByCode(basket.ProductCode).Result;
            if (basket.Price != product.PriceLists[0].Price)
            {
                basket.Price = product.PriceLists[0].Price;
                basket.Total = basket.Price * basket.Amount;
                basket.VatPrice = basket.Total * basket.VatRate / 100;

            }
        }
        return base.OnParametersSetAsync();
    }

    protected override void OnInitialized()
    {
        
    }
    private void LineDelete(MouseEventArgs e)
    {
        if (selectedBasket != null)
        {
            orderService.DeleteProduct(selectedBasket);
            baskets = orderService.GetAll(userService.User);
        }
    }
    private void BasketDelete(MouseEventArgs e)
    {
        ConfirmRef.BodyText = "Sepetteki Tüm Ürünler Silinecek Onaylıyormusunuz.?";
        ConfirmRef.Show();
    }


    private void basketUpdate()
    {

        foreach (var basket in baskets.ToArray())
        {
            if (basket.Amount == 0)
            {
                baskets.Remove(basket);
                orderService.DeleteProduct(basket);
            }
        }
        StateHasChanged();
    }

    private void change(double e, Basket basket)
    {
        basket.Amount = e;
        basket.Total = basket.Amount * basket.Price;
        basket.VatPrice = basket.Total * basket.VatRate / 100;

    }


    private void ConfirmDeleteBasket(bool confirm)
    {
        if (confirm)
        {
            orderService.DeleteBasket(userService.User.Id);
            baskets = orderService.GetAll(userService.User);
        }
    }


    private void SendData()
    {
        foreach (var basket in baskets)
        {
            basket.Send = true;
            orderService.UpdateBasket(basket);
        }
        navManager.NavigateTo("/products");
        StateHasChanged();
    }
}
