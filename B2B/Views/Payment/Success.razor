@page "/success/{guid}"
@using Business.SingletonServices
@using Microsoft.AspNetCore.Components.Rendering
@using Business.Abstract;
@using Business.Concrete;
@using DataAccess.Abstract;
@using Entity;
@using System.Text;
@using SendEMail

@attribute [Authorize]
@inject IPaymentService paymentManager
@inject FirmParameter firmParam
@inject IOrderService orderService
@inject IUserIdentityProcessor userIdentity
@inject IUserService userService
@inject IJSRuntime JSRuntime


 @((MarkupString)GenerateEmailContent())

 <input type="button" class="btn btn-primary" onclick="@Print" value="Yazdır" />
 <input type="button" class="btn btn-primary" value="Ana Sayfa" />
 <input type="button" class="btn btn-primary" value="Ödeme Sayfası" />
@code {
    [Parameter]
    public string guid { get; set; }
    string htmlstring;
    PaymentTransaction payment;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    protected async override void OnInitialized()
    {
        payment = (await paymentManager.GetByOrderNumber(Guid.Parse(guid))).Data;
        if (payment == null)
            throw new Exception("Hatalı Sipariş Nuraması");
        var param = firmParam.Get(1);



        // OrdFiche ordFiche = orderService.GetFiche(payment.OrderNumber);
        // if (ordFiche != null)
        // {
        //     ordFiche.Send = true;
        //     ordFiche.Explanation = ordFiche.Explanation ?? string.Empty; //null giderse api hata veriyor
        //     // orderService.UpdateBasket(ordFiche);
        // }
        EMailSender es = new EMailSender(firmParam.ToString(11), firmParam.ToInteger(12), firmParam.ToBoolean(13), firmParam.ToString(14), firmParam.ToString(15));
          await es.SendEmailAsync(firmParam.ToString(7), "Kredi Kartı Tahsilat Maili", GenerateEmailContent());
          if (payment.User != null || firmParam.ToString(7) != payment.User.Email)
             await es.SendEmailAsync(payment.User.Email, "Kredi Kartı Tahsilat Maili",GenerateEmailContent());

    }

    private string GenerateEmailContent()
    {
        return $@"
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset='UTF-8'>
        <style>
            /* CSS Document */
            #cerceve {{
                display: block;
                height: 800px;
                width: 900px;
                margin-right: auto;
                margin-left: auto;
                padding: 0px;
                overflow: hidden;
            }}

            .text-bold {{
                font-weight: bold;
            }}

            .baslik td {{
                padding: 15px;
                text-align: center;
                font-weight: bold;
                border: 1px solid black;
            }}

            .table tr td {{
                text-align: left;
            }}

            .table td {{
                padding: 5px;
            }}

            .line td {{
                padding: 5px;
                border-bottom: 1px solid black;
            }}
        </style>
        <script type='text/javascript'>
            function Print() {{
                window.print();
            }}
        </script>
    </head>
    <body>
        <div id='cerceve'>
            <img src='./media/logo.png' height='80' alt=''>
            <table style='width:100%;'>
                <tr class='baslik'>
                    <td colspan='3'>islemturu</td>
                </tr>
                <tr>
                    <td>İşlem No</td>
                    <td> : </td>
                    <td>{payment.TransactionNumber}</td>
                </tr>
 <tr>
                    <td>Referans No No</td>
                    <td> : </td>
                    <td>{payment.ReferenceNumber}</td>
                </tr>
                <tr>
                    <td>Cari Ünvanı</td>
                    <td> : </td>
                    <td>{firmParam.ToString(1)}</td>
                </tr>
                <tr>
                    <td>Tarih</td>
                    <td> : </td>
                    <td>{payment.PaidDate}</td>
                </tr>
                <tr>
                    <td>Cari Kod</td>
                    <td> : </td>
                    <td></td>
                </tr>
                <tr>
                    <td>Cari Ünvan</td>
                    <td> : </td>
                    <td></td>
                </tr>
                <tr>
                    <td>Açıklama</td>
                    <td> : </td>
                    <td>{payment.Explanation}</td>
                </tr>
                <tr class='line'>
                    <td colspan='3'></td>
                </tr>
                <tr>
                    <td>Ad Soyad</td>
                    <td> : </td>
                    <td>{payment.CardHolderName}</td>
                </tr>
                <tr>
                    <td>Kredi Kartı No</td>
                    <td> : </td>
                    <td>{payment.MaskedCardNumber}</td>
                </tr>
                <tr>
                    <td>Banka Adı</td>
                    <td> : </td>
                    <td>{payment.VirtualPos.BankCard.Name}</td>
                </tr>
                <tr>
                    <td>Tutar</td>
                    <td> : </td>
                    <td>
                        <span class=''>{payment.TotalAmount} TL</span>
                    </td>
                </tr>
                <tr>
                    <td>Taksit</td>
                    <td> : </td>
                    <td>
                        <span class=''>{payment.Installment}</span>
                    </td>
                </tr>
                <tr>
                    <td>Yalnız</td>
                    <td> : </td>
                    <td>{NumbertoString(payment.TotalAmount)}</td>
                </tr>
                <tr class='line'>
                    <td colspan='3'></td>
                </tr>
            </table>
            <div style='display: block;'></div>
        </div>
    </body>
    </html>";
    }


    private async void Print()
    {
        // JavaScript ile yazdırma işlemi başlatma
         await JSRuntime.InvokeVoidAsync("window.print");
    }


    private string NumbertoString(decimal tutar)
    {
        string sTutar = tutar.ToString("F2").Replace('.', ',');
        string lira = sTutar.Substring(0, sTutar.IndexOf(','));
        string kurus = sTutar.Substring(sTutar.IndexOf(',') + 1, 2);
        string yazi = "";

        string[] birler = { "", "BİR", "İKİ", "Üç", "DÖRT", "BEŞ", "ALTI", "YEDİ", "SEKİZ", "DOKUZ" };
        string[] onlar = { "", "ON", "YİRMİ", "OTUZ", "KIRK", "ELLİ", "ALTMIŞ", "YETMİŞ", "SEKSEN", "DOKSAN" };
        string[] binler = { "KATRİLYON", "TRİLYON", "MİLYAR", "MİLYON", "BİN", "" };

        int grupSayisi = 6;


        lira = lira.PadLeft(grupSayisi * 3, '0');

        string grupDegeri;

        for (int i = 0; i < grupSayisi * 3; i += 3)
        {
            grupDegeri = "";

            if (lira.Substring(i, 1) != "0")
                grupDegeri += birler[Convert.ToInt32(lira.Substring(i, 1))] + "YÜZ";

            if (grupDegeri == "BİRYÜZ")
                grupDegeri = "YÜZ";

            grupDegeri += onlar[Convert.ToInt32(lira.Substring(i + 1, 1))];

            grupDegeri += birler[Convert.ToInt32(lira.Substring(i + 2, 1))];

            if (grupDegeri != "")
                grupDegeri += binler[i / 3];

            if (grupDegeri == "BİRBİN")
                grupDegeri = "BİN";

            yazi += grupDegeri;
        }

        if (yazi != "")
            yazi += " TL ";

        int yaziUzunlugu = yazi.Length;

        if (kurus.Substring(0, 1) != "0")
            yazi += onlar[Convert.ToInt32(kurus.Substring(0, 1))];

        if (kurus.Substring(1, 1) != "0")
            yazi += birler[Convert.ToInt32(kurus.Substring(1, 1))];

        if (yazi.Length > yaziUzunlugu)
            yazi += " Kr.";
        else
            yazi += "SIFIR Kr.";

        return yazi;
    }
}
