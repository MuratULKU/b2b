@page "/register"
@using B2C.Data
@using System.Text.Json
@using B2C.Validation
@using Business.Abstract
@using Business.Concrete
@using CoreUI.Components.NotificationService
@using CoreUI.Data
@inject ILogger<UserRegisterModel> Logger
@inject IUserService userManager
@inject IRoleService roleManager
@inject IUserRoleService userRoleManager;
@inject FirmParameterService firmParam
@inject NavigationManager navManager
@inject NotificationService notification

<EditForm Model="Model" OnValidSubmit="Submit">
    <CustomValidation @ref="customValidation" />
    <div class="card shadow">
        <div class="card-header">
            <label>Yeni Kullanıcı Tanımlama</label>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="form-input" style="width:500px; min-width:250px;">
                    <div class="entryarea">
                        <input type="text" @bind-value="Model!.Name" onblur="" />
                        <div class="labelline">Adınız Girin</div>
                        <ValidationMessage For="()=>Model.Name" />
                    </div>
                </div>
                <div class="form-input" style="width:500px; min-width:250px;">
                    <div class="entryarea">
                        <input type="text" @bind-value="Model!.SurName" />
                        <div class="labelline">Soyadınızı Girin </div>
                        <ValidationMessage For="()=>Model.SurName" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-input" style="width:500px; min-width:250px;">
                    <div class="entryarea">
                        <input type="email" @bind-value="Model!.Email" />
                        <div class="labelline">Mail Adresi</div>
                        <ValidationMessage For="()=>Model.Email" />
                    </div>

                </div>
                <div class="form-input" style="width:500px; min-width:250px;">
                    <div class="entryarea">
                        <input type="password" @bind-value="Model!.Password" />
                        <div class="labelline">Şifre </div>
                        <ValidationMessage For="()=>Model.Password" />
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <input type="submit" class="btn btn-success" value="Kaydet" />
            </div>
        </div>
    </div>
</EditForm>


@code {
    private CustomValidation? customValidation;
    string inputClass = "unmodified";

    public UserRegisterModel? Model { get; set; }


    protected override void OnInitialized() => Model ??= new();


    protected async override Task OnInitializedAsync()
    {
        using FileStream openStream = File.OpenRead(@"./wwwroot/city.json");
        cities = await JsonSerializer.DeserializeAsync<List<City>>(openStream);

    }

    private List<City> cities;



    private async void Submit()
    {
        customValidation?.ClearErrors();
        var errors = new Dictionary<string, List<string>>();
        if (Model!.Name == null || Model!.Name == string.Empty)
            errors.Add(nameof(Model.Name), new() { "İsminizi Girin" });
        if (Model!.Name != null && Model!.Name.Length < 3)
            errors.Add(nameof(Model.Name), new() { "En Az 3 Karakter Olmalı" });
        if (Model!.SurName == null || Model!.SurName == string.Empty)
            errors.Add(nameof(Model.SurName), new() { "Soyisminizi Girin" });
        if (Model!.SurName != null && Model!.SurName.Length < 2)
            errors.Add(nameof(Model.SurName), new() { "En Az 2 Karakter Olmalı" });
        if (Model!.Email == null || Model!.Email == string.Empty)
            errors.Add(nameof(Model.Email), new() { "Mail Adresininizi Giriniz" });
        var mail = userManager.GetUserMail(Model!.Email)?.Result?.Email;
        if (Model!.Email != null && Model!.Email.Equals(mail))
            errors.Add(nameof(Model.Email), new() { "Mail Adresi Daha Önce Kayıtlı" });
        if(Model!.Password == null || Model!.Password== string.Empty)
            errors.Add(nameof(Model.Password), new() { "Şifre En Az 6 Karakter Olmalı" });
        if (Model!.Password != null && Model!.Password.Length < 6)
            errors.Add(nameof(Model.Password), new() { "Şifre En Az 6 Karakter Olmalı" });
        if (errors.Any())
        {
            customValidation?.DisplayErrors(errors);
        }
        else
        {
            Guid id = Guid.NewGuid();
            var role = await roleManager.GetRole("User");
            UserRole userRole = new();
            userRole.Id = Guid.NewGuid();
            userRole.UserId = id;
            userRole.RoleId = role.Data.Id;
            var test = await userManager.AddUser(new User
            {
                Id= id,
                Username = Model.Name,
                Email = Model.Email,
                AccountCode = firmParam.Get(35).ToString(),
                AccountName = Model.SurName,
                Discount = 0,
                Active = false,
                CreateDate = DateTime.Now.Date,
                UpdateDate = DateTime.Now.Date,
                CreateUser = id,
                UpdateUser= id,
                Password=Model.Password
            });
            if(test.Status == Core.Abstract.ResultStatus.Success)
            {
                var test1 = await userRoleManager.AddRole(userRole);
                if(test1.Status == Core.Abstract.ResultStatus.Success)
                {
                    navManager.NavigateTo("/Confirmregister", true);
                }
                else
                {
                    notification.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = test1.Message, Detail = "", Duration = 5000 });
                }
            }
            else
            {
                notification.Notify(new NotificationMessage {Severity=NotificationSeverity.Error,Summary=test.Message,Detail="",Duration=5000 });
            }

        }
    }



}
