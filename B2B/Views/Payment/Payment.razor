@page "/payment"
@using System.Text.RegularExpressions;
@using B2B.Components.MaskInput;
@using B2B.Data;
@using Business.Abstract;
@using Entity;
@using System.Text;

@using System.Text.Json;
@using Microsoft.Extensions.Primitives;
@using Microsoft.Net.Http.Headers;
@using _3DPayment.Request;
@using _3DPayment;
@using _3DPayment.Results;

@using static System.Net.Mime.MediaTypeNames;
@attribute [Authorize]
@inject IJSRuntime js
@inject ICreditCardPrefixService creditCardService
@inject IVirtualPosService virtualPosService
@inject IFirmParamService firmParamService
@inject IBankCardService bankCardService
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject IPaymentProviderFactory paymentProviderFactory
@inject IJSRuntime JS
<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="creditcard">
                <div class="front">
                    <svg version="1.1" id="cardfront" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                         x="0px" y="0px" viewBox="0 0 750 471" style="enable-background:new 0 0 750 471;" xml:space="preserve">
                    <g id="Front">
                    <g id="CardBackground">
                    <g id="Page-1_1_">
                    <g id="amex_1_">
                    <path id="Rectangle-1_1_" class="lightcolor grey" d="M40,0h670c22.1,0,40,17.9,40,40v391c0,22.1-17.9,40-40,40H40c-22.1,0-40-17.9-40-40V40
                            C0,17.9,17.9,0,40,0z" />
                                </g>
                            </g>
                    <path class="darkcolor purpledark" d="M750,431V193.2c-217.6-57.5-556.4-13.5-750,24.9V431c0,22.1,17.9,40,40,40h670C732.1,471,750,453.1,750,431z" />
                        </g>
                    <text transform="matrix(1 0 0 1 60.106 295.0121)" id="svgnumber" class="st2 st3 st4">@cardNumber</text>
                    <text transform="matrix(1 0 0 1 54.1064 428.1723)" id="svgname" class="st2 st5 st6">@namesurname</text>
                    <text transform="matrix(1 0 0 1 54.1074 389.8793)" class="st7 st5 st8">cardholder name</text>
                    <text transform="matrix(1 0 0 1 479.7754 388.8793)" class="st7 st5 st8">expiration</text>
                    <text transform="matrix(1 0 0 1 65.1054 241.5)" class="st7 st5 st8">card number</text>
                    <g>
                    <text transform="matrix(1 0 0 1 574.4219 433.8095)" id="svgexpire" class="st2 st5 st9">@ExpiryDate</text>
                    <text transform="matrix(1 0 0 1 479.3848 417.0097)" class="st2 st10 st11">VALID</text>
                    <text transform="matrix(1 0 0 1 479.3848 435.6762)" class="st2 st10 st11">THRU</text>
                    <polygon class="st2" points="554.5,421 540.4,414.2 540.4,427.9 		" />
                        </g>
                    <g id="cchip">
                    <g>
                    <path class="st2" d="M168.1,143.6H82.9c-10.2,0-18.5-8.3-18.5-18.5V74.9c0-10.2,8.3-18.5,18.5-18.5h85.3
                        c10.2,0,18.5,8.3,18.5,18.5v50.2C186.6,135.3,178.3,143.6,168.1,143.6z" />
                            </g>
                    <g>
                    <g>
                    <rect x="82" y="70" class="st12" width="1.5" height="60" />
                                </g>
                    <g>
                    <rect x="167.4" y="70" class="st12" width="1.5" height="60" />
                                </g>
                    <g>
                    <path class="st12" d="M125.5,130.8c-10.2,0-18.5-8.3-18.5-18.5c0-4.6,1.7-8.9,4.7-12.3c-3-3.4-4.7-7.7-4.7-12.3
                            c0-10.2,8.3-18.5,18.5-18.5s18.5,8.3,18.5,18.5c0,4.6-1.7,8.9-4.7,12.3c3,3.4,4.7,7.7,4.7,12.3
                            C143.9,122.5,135.7,130.8,125.5,130.8z M125.5,70.8c-9.3,0-16.9,7.6-16.9,16.9c0,4.4,1.7,8.6,4.8,11.8l0.5,0.5l-0.5,0.5
                            c-3.1,3.2-4.8,7.4-4.8,11.8c0,9.3,7.6,16.9,16.9,16.9s16.9-7.6,16.9-16.9c0-4.4-1.7-8.6-4.8-11.8l-0.5-0.5l0.5-0.5
                            c3.1-3.2,4.8-7.4,4.8-11.8C142.4,78.4,134.8,70.8,125.5,70.8z" />
                                </g>
                    <g>
                    <rect x="82.8" y="82.1" class="st12" width="25.8" height="1.5" />
                                </g>
                    <g>
                    <rect x="82.8" y="117.9" class="st12" width="26.1" height="1.5" />
                                </g>
                    <g>
                    <rect x="142.4" y="82.1" class="st12" width="25.8" height="1.5" />
                                </g>
                    <g>
                    <rect x="142" y="117.9" class="st12" width="26.2" height="1.5" />
                                </g>
                            </g>
                        </g>
                    </g>
                    <g id="Back">
                    </g>
                </svg>
                </div>
            </div>
            <div class="form-container">
                <div class="row">
                    <div class="col-5">
                        <label style="align-content:center" for="namesurname">Ad Soyad</label>
                    </div>
                    <div class="col-7">
                        <input class="form-control" type="text" id="namesurname" @bind-value="namesurname" />
                    </div>
                    <div class="col-5">
                        <label style="align-content:center" for="cardnumber">K.K Numarası</label>
                    </div>
                    <div class="col-7">
                        <MaskInput class="form-control" id="cardnumber" Mask="**** **** **** ****" CharacterPattern="[0-9]" Placeholder="0000 0000 0000 0000"
                        @bind-value="@cardNumber" Change="CardNumberChanged" />
                    </div>
                    <div class="col-5">
                        <label for="expdate">S. K. Tarihi</label>
                    </div>
                    <div class="col-7">
                        <MaskInput class="form-control" id="expdate" Mask="**/**" CharacterPattern="[0-9]" Placeholder="00/00"
                        @bind-value="@ExpiryDate" />
                    </div>
                    <div class="col-5">
                        <label for="cvv2">Güvenlik</label>
                    </div>
                    <div class="col-7">
                        <MaskInput class="form-control" id="ccv2" Mask="***" CharacterPattern="[0-9]" Placeholder="000"
                        @bind-value="@Ccv2Code" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="from-payment-plan">
                <DataGrid @ref="installmentGrid"
                          TItem="InstallmentViewModel.InstallmentRate"
                          Data="installmentViewModel.InstallmentRates"
                @bind-SelectedRow="selectInstallment"
                                        Responsive>
                    <DataGridColumns>
                        <DataGridCommandColumn />
                        <DataGridColumn Field="@nameof(InstallmentViewModel.InstallmentRate.BankName)" Caption="Banka Adı" />
                        <DataGridColumn Field="@nameof(InstallmentViewModel.InstallmentRate.Text)" Caption="Taksit Sayısı" />
                        <DataGridColumn Field="@nameof(InstallmentViewModel.InstallmentRate.Amount)" Caption="Taksit Tutarı" TextAlignment="TextAlignment.End" />
                        <DataGridColumn Field="@nameof(InstallmentViewModel.InstallmentRate.TotalAmount)" Caption="Toplam Tutar" TextAlignment="TextAlignment.End" />

                    </DataGridColumns>
                </DataGrid>
                <button class="btn btn-primary" onclick="@payment">Öde</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="payment-modal" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdrop" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <iframe style="width:100%;height:500px;border:none" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>

@code {

    private string cardNumber { get; set; }
    private string ExpiryDate { get; set; }
    private string Ccv2Code { get; set; }
    private string namesurname { get; set; }
    private string iframesrc;
    private decimal total { get; set; } = 10;
    private CreditCardPrefix creditCardPrefix;
    private List<VirtualPos> virtualPos;
    private VirtualPos cashVirtualPos;
    public InstallmentViewModel installmentViewModel = new();
    public InstallmentViewModel.InstallmentRate selectInstallment;
    private DataGrid<InstallmentViewModel.InstallmentRate> installmentGrid;


    string iframetext;
    bool show;

    private void submit(EventArgs e)
    {
        var h = e;
    }
    protected override void OnInitialized()
    {
        try
        {
            cashVirtualPos = virtualPosService.GetVirtualPosAsync(Guid.Parse(Encoding.UTF8.GetString((byte[])firmParamService.Get(10)))).Result;
        }
        catch (Exception)
        {
                    
            // hata fırlatılacak sanal pos tanımlı değil ise
        }
        
    }

    private void CardNumberChanged(string e)
    {
        try
        {
            if (total > 0)
            {
                if (virtualPos == null)
                    virtualPos = new();
                else
                    virtualPos.Clear();
                installmentViewModel.InstallmentRates.Clear();
                virtualPos.Add(cashVirtualPos);
                if (e.Length > 6)
                {
                    creditCardPrefix = null;
                    creditCardPrefix = creditCardService.GetByPrefix(e.Replace(" ", string.Empty).Substring(0, 6));
                    if (creditCardPrefix != null)
                    {
                        var tList = virtualPosService.GetByBrandCode(creditCardPrefix.BrandCode).Result;
                        if (tList.Count == 0)
                        {
                            VirtualPos bankpos = virtualPosService.GetByBankCode(creditCardPrefix.BankCode, creditCardPrefix.Business).Result;
                            tList.Add(bankpos);
                        }

                        foreach (VirtualPos pList in tList)
                        {
                            if (!virtualPos.Contains(pList))
                                virtualPos.Add(pList);
                        }
                    }
                    if (virtualPos != null)
                    {
                        foreach (VirtualPos vPos in virtualPos)
                        {
                            if (cashVirtualPos != null && vPos == cashVirtualPos)
                            {
                                installmentViewModel.InstallmentRates.Add(
                                new()
                                    {
                                        Text = "Tek Çekim",
                                        Amount = total.ToString("N2"),
                                        AmountValue = total,
                                        TotalAmount = total.ToString("N2"),
                                        TotalAmountValue = total,
                                        VirtualPos = vPos,
                                        BankName = vPos.BankCard.Name
                                    });

                            }
                            //prefix bu karta ait değilse taksit ekleme

                            foreach (var installment in vPos.BankCard.Installments)
                            {
                                decimal installmentAmount = total;
                                decimal installmentTotalAmount = installmentAmount;

                                if (installment.InstallmentRate > 0)
                                {
                                    installmentTotalAmount = Math.Round(total + ((total * installment.InstallmentRate) / 100), 2, MidpointRounding.AwayFromZero);
                                }

                                installmentAmount = Math.Round(installmentTotalAmount / installment.Installment, 2, MidpointRounding.AwayFromZero);

                                installmentViewModel.InstallmentRates.Add(new InstallmentViewModel.InstallmentRate
                                    {
                                        Text = $"{installment.Installment} Taksit",
                                        Installment = installment.Installment,
                                        Rate = installment.InstallmentRate,
                                        Amount = installmentAmount.ToString("N2"),
                                        AmountValue = installmentAmount,
                                        TotalAmount = installmentTotalAmount.ToString("N2"),
                                        TotalAmountValue = installmentTotalAmount,
                                        VirtualPos = vPos,
                                        BankName = vPos.BankCard.Name
                                    });




                            }
                            installmentGrid.Reload();
                        }

                    }
                    else
                    {
                        //sanal pos boşolamaz
                    }
                }

            }
            else
            {
                //tutar 0 dan büyük olmalı
            }
        }
        catch (Exception)
        {

            throw;
        }
    }


    private async void payment()
    {
        if (selectInstallment != null)
        {
            PaymentViewModel paymentViewModel = new PaymentViewModel()
                {
                    BankId= selectInstallment.VirtualPos.BankCardId,
                    CardHolderName = namesurname,
                    CardNumber = cardNumber.Replace(" ", string.Empty),
                    ExpireMonth = Convert.ToInt32(ExpiryDate.Substring(0, 2)),
                    ExpireYear = Convert.ToInt32(ExpiryDate.Substring(3, 2)),
                    CvvCode = Ccv2Code,
                    CardType = "5",
                    Installment = 1,
                    TotalAmount = total,
                    
                };



            httpClient.DefaultRequestHeaders.Clear();
            if (httpClient.BaseAddress == null)
                httpClient.BaseAddress = new Uri(navManager.BaseUri);

            var viewModelJson = new StringContent(
         JsonSerializer.Serialize(paymentViewModel),
         Encoding.UTF8,
         Application.Json);
            using var httpResponseMessage =
                   await httpClient.PostAsync(@"/Payment/Index", viewModelJson);


            httpResponseMessage.EnsureSuccessStatusCode();

            var result = await httpResponseMessage.Content.ReadAsStringAsync();
            returnModel t = JsonSerializer.Deserialize<returnModel>(result);
            iframesrc = t.gatewayUrl;
            await JS.InvokeVoidAsync("iframe.ac", t);
            await JS.InvokeAsync<VerifyGatewayResult>("iframe.kapat", "/Payment/Completed/");
            
        }
    }

    public class returnModel
    {
        public string gatewayUrl { get; set; }
        public string message { get; set; }

    }
}
