// <auto-generated />
using System;
using DataAccess.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace B2B.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231119120407_init1")]
    partial class init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Entity.BankCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BankCode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseCommonPaymentPage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("Entity.BankParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BankCardId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankCardId");

                    b.ToTable("BankParameters");
                });

            modelBuilder.Entity("Entity.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date_")
                        .HasColumnType("TEXT");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("REAL");

                    b.Property<double>("DiscountRate")
                        .HasColumnType("REAL");

                    b.Property<string>("DocNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LineNUmber")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Send")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("TEXT");

                    b.Property<double>("VatPrice")
                        .HasColumnType("REAL");

                    b.Property<double>("VatRate")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Entity.CardBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CardBrands");
                });

            modelBuilder.Entity("Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("LogicalRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Parent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entity.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("BankCardId")
                        .HasColumnType("TEXT");

                    b.Property<int>("BrandCode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CampaignCard")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CardBrandId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ManufacturerCard")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankCardId");

                    b.HasIndex("CardBrandId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Entity.CreditCardInstallment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("BankCardId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Business")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CardBrandId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreditCardId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Installment")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("InstallmentRate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankCardId");

                    b.HasIndex("CardBrandId");

                    b.HasIndex("CreditCardId");

                    b.ToTable("CreditCardInstallments");
                });

            modelBuilder.Entity("Entity.CreditCardPrefix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BankCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrandCode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Business")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreditCardId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isInstallment")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId");

                    b.ToTable("CreditCardPrefixes");
                });

            modelBuilder.Entity("Entity.DocumentNo", b =>
                {
                    b.Property<int>("DocType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DocType");

                    b.ToTable("DocumentNo");
                });

            modelBuilder.Entity("Entity.FirmDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("InfoType")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("LData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("LineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProtuctId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FirmDocs");
                });

            modelBuilder.Entity("Entity.FirmParam", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("No")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Key");

                    b.ToTable("FirmParams");
                });

            modelBuilder.Entity("Entity.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BankCardId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BankErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("BankRequest")
                        .HasColumnType("TEXT");

                    b.Property<string>("BankResponse")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardPrefix")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExtraInstallment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Installment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaskedCardNumber")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIpAddress")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankCardId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("Entity.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Cardref")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Priorty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceLists");
                });

            modelBuilder.Entity("Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("LogicalRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProducerCode")
                        .HasColumnType("TEXT");

                    b.Property<double?>("SellVat")
                        .HasColumnType("REAL");

                    b.Property<string>("SpeCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeCode2")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeCode3")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeCode4")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeCode5")
                        .HasColumnType("TEXT");

                    b.Property<string>("StGrupCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit1")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Unit1rate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Unit2rate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit3")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Unit3rate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Vat")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entity.ProductAmount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<double>("OnHand")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StockRef")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAmounts");
                });

            modelBuilder.Entity("Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c226ba28-e656-46c9-b8b5-465edf0dffa3"),
                            CreateDate = new DateTime(2023, 11, 19, 15, 4, 7, 5, DateTimeKind.Local).AddTicks(68),
                            CreateUser = new Guid("064a3ac8-9505-4d43-8a4e-9c822cab7a39"),
                            RoleName = "Admin",
                            UpdateDate = new DateTime(2023, 11, 19, 15, 4, 7, 5, DateTimeKind.Local).AddTicks(81),
                            UpdateUser = new Guid("064a3ac8-9505-4d43-8a4e-9c822cab7a39")
                        },
                        new
                        {
                            Id = new Guid("1e8aa23c-343f-48a8-aa6e-0a8cbf9232d6"),
                            CreateDate = new DateTime(2023, 11, 19, 15, 4, 7, 5, DateTimeKind.Local).AddTicks(99),
                            CreateUser = new Guid("064a3ac8-9505-4d43-8a4e-9c822cab7a39"),
                            RoleName = "User",
                            UpdateDate = new DateTime(2023, 11, 19, 15, 4, 7, 5, DateTimeKind.Local).AddTicks(100),
                            UpdateUser = new Guid("064a3ac8-9505-4d43-8a4e-9c822cab7a39")
                        });
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("064a3ac8-9505-4d43-8a4e-9c822cab7a39"),
                            AccountCode = "",
                            CreateDate = new DateTime(2023, 11, 19, 15, 4, 7, 5, DateTimeKind.Local).AddTicks(133),
                            CreateUser = new Guid("064a3ac8-9505-4d43-8a4e-9c822cab7a39"),
                            Email = "murat@ulkubilgisayar.com",
                            Password = "Admin",
                            UpdateDate = new DateTime(2023, 11, 19, 15, 4, 7, 5, DateTimeKind.Local).AddTicks(134),
                            UpdateUser = new Guid("064a3ac8-9505-4d43-8a4e-9c822cab7a39"),
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("Entity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("064a3ac8-9505-4d43-8a4e-9c822cab7a39"),
                            RoleId = new Guid("c226ba28-e656-46c9-b8b5-465edf0dffa3"),
                            CreateDate = new DateTime(2023, 11, 19, 15, 4, 7, 5, DateTimeKind.Local).AddTicks(151),
                            CreateUser = new Guid("064a3ac8-9505-4d43-8a4e-9c822cab7a39"),
                            Id = new Guid("4666365f-014c-4fc7-87f4-4dfe96174263"),
                            UpdateDate = new DateTime(2023, 11, 19, 15, 4, 7, 5, DateTimeKind.Local).AddTicks(151),
                            UpdateUser = new Guid("064a3ac8-9505-4d43-8a4e-9c822cab7a39")
                        });
                });

            modelBuilder.Entity("Entity.VirtualPos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BankCardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CardBrandId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankCardId");

                    b.HasIndex("CardBrandId");

                    b.ToTable("VirtualPos");
                });

            modelBuilder.Entity("Entity.BankParameter", b =>
                {
                    b.HasOne("Entity.BankCard", "Bank")
                        .WithMany("Parameters")
                        .HasForeignKey("BankCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Entity.CreditCard", b =>
                {
                    b.HasOne("Entity.BankCard", "Bank")
                        .WithMany("CreditCards")
                        .HasForeignKey("BankCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.CardBrand", "CardBrand")
                        .WithMany()
                        .HasForeignKey("CardBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("CardBrand");
                });

            modelBuilder.Entity("Entity.CreditCardInstallment", b =>
                {
                    b.HasOne("Entity.BankCard", "BankCard")
                        .WithMany("Installments")
                        .HasForeignKey("BankCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.CardBrand", "CardBrand")
                        .WithMany()
                        .HasForeignKey("CardBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.CreditCard", "CreditCard")
                        .WithMany("Installments")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankCard");

                    b.Navigation("CardBrand");

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("Entity.CreditCardPrefix", b =>
                {
                    b.HasOne("Entity.CreditCard", null)
                        .WithMany("Prefixes")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.FirmDoc", b =>
                {
                    b.HasOne("Entity.Product", null)
                        .WithMany("firmDocs")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Entity.PaymentTransaction", b =>
                {
                    b.HasOne("Entity.BankCard", "BankCard")
                        .WithMany()
                        .HasForeignKey("BankCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankCard");
                });

            modelBuilder.Entity("Entity.PriceList", b =>
                {
                    b.HasOne("Entity.Product", "Product")
                        .WithMany("PriceLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entity.ProductAmount", b =>
                {
                    b.HasOne("Entity.Product", "Product")
                        .WithMany("ProductAmounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entity.UserRole", b =>
                {
                    b.HasOne("Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.VirtualPos", b =>
                {
                    b.HasOne("Entity.BankCard", "BankCard")
                        .WithMany("VirtualPos")
                        .HasForeignKey("BankCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.CardBrand", "CardBrand")
                        .WithMany()
                        .HasForeignKey("CardBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankCard");

                    b.Navigation("CardBrand");
                });

            modelBuilder.Entity("Entity.BankCard", b =>
                {
                    b.Navigation("CreditCards");

                    b.Navigation("Installments");

                    b.Navigation("Parameters");

                    b.Navigation("VirtualPos");
                });

            modelBuilder.Entity("Entity.CreditCard", b =>
                {
                    b.Navigation("Installments");

                    b.Navigation("Prefixes");
                });

            modelBuilder.Entity("Entity.Product", b =>
                {
                    b.Navigation("PriceLists");

                    b.Navigation("ProductAmounts");

                    b.Navigation("firmDocs");
                });

            modelBuilder.Entity("Entity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.Navigation("UsersRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
