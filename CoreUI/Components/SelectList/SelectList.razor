@using System.Linq.Expressions;
@typeparam TItem

<select class="form-select" value="@Selected" onchange="@Update">
    @if (Items != null)
    {
        @foreach (var item in Items)
        {
            <option value="@Text(item, ValueField)">@Text(item, DisplayField)</option>
        }
    }
</select>

@code {

    [Parameter, EditorRequired] public List<TItem> Items { get; set; }

    [Parameter] public object Selected { get; set; }
    [Parameter]
    public TItem SelectedItem { get; set; } = default!;
    [Parameter, EditorRequired] public string DisplayField { get; set; }
    [Parameter, EditorRequired] public string ValueField { get; set; }

    [Parameter] public EventCallback<object> SelectedChanged { get; set; }
    [Parameter] public EventCallback<TItem> SelectedItemChanged { get; set; }


    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender && Items != null)
        {
            var selectedItem = Items.First();
            Selected = Text(selectedItem, ValueField);

            // Seçili öğeyi ve nesneyi event olarak tetikle
            await SelectedChanged.InvokeAsync(Selected);
            await SelectedItemChanged.InvokeAsync(selectedItem);
        }
    }

    private async Task Update(ChangeEventArgs e)
    {
        var selectedValue = e.Value;

        // Seçilen öğeyi bul
        var selectedItem = Items.FirstOrDefault(item =>
            Text(item, ValueField) == selectedValue?.ToString());

        // Object olarak güncelle
        await SelectedChanged.InvokeAsync(selectedValue);

        // TItem olarak güncelle
        if (selectedItem != null)
        {
            await SelectedItemChanged.InvokeAsync(selectedItem);
        }
    }

    private string Text(TItem item, string columnName)
    {
        return item.GetType().GetProperty(columnName)
        ?.GetValue(item, null)?.ToString() ?? string.Empty;
    }
}
