@page "/report/{state:int}"
@using B2B.Components.Login;
@using Business.Abstract;
@using Business.Concrete;
@using System.Text.Json;
@using Entity;
@using Newtonsoft.Json.Linq;
@using SanalMagazaWebApiUI.Models;
@attribute [Authorize]
@inject UserManager _userManager
<div class="container">
    <div>
        <div style="display:flex;">
            <div style="display:flex;">
                <label style="margin:auto;margin-right:20px;">İlk Tarih</label>
                <DateEdit Style="width:150px;" @bind-Date="startDate" />
            </div>
            <div style="display:flex;margin-right:20px;margin-left: 50px;">
                <label style="margin:auto;margin-right:20px;">Son Tarih</label>
                <DateEdit Style="width:150px;" @bind-Date="endDate" />
            </div>
            <div>
                <button class="btn btn-outline-primary my-2 my-sm-0" style="border-radius:20px;" type="submit" onclick="@OnParametersSet">Sorgula</button>
            </div>
        </div>
        <ErrorBoundary>

            @if (OrderList != null)
            {
                <DataGrid @ref="listGrid" TItem="Order"
                          Data="OrderList.Lines"
                          DetailRowStartsVisible="false"
                                ShowPager
                          ReadData="@OnReadData"
                          PageSize="pageSize"
                          TotalItems="OrderList.TotalCount">

                    <DataGridColumns>
                        <DataGridColumn Field="@nameof(Entity.Order.FicheNo)" Caption="Fiş No" />
                        <DataGridColumn Field="@nameof(Entity.Order.Date_)" Caption="Tarih">
                            <DisplayTemplate>
                                @(context.Date_.ToString("dd/MM/yyyy"))
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridColumn Field="@nameof(Entity.Order.Explanation)" Caption="Açıklama" />
                        <DataGridColumn Field="@nameof(Entity.Order.GrossTotal)" Caption="Toplam" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                        <DataGridColumn Field="@nameof(Entity.Order.TotalDiscounted)" Caption="Iskonto" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                        <DataGridColumn Field="@nameof(Entity.Order.TotalVat)" Caption="Vergi" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                        <DataGridColumn Field="@nameof(Entity.Order.Total)" Caption="Genel Toplam" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                    </DataGridColumns>
                    <DetailRowTemplate>
                        @{
                            var detail = (context as Entity.Order).Lines;
                            <DataGrid TItem="Entity.OrderLine"
                                      Data="detail">
                                <DataGridAggregates>
                                    <DataGridAggregate Field="@nameof(Entity.OrderLine.Vat)" Aggregate="DataGridAggregateType.None" Context="detail">
                                        <DisplayTemplate>
                                            <label style="font-weight: bold;">@($"Toplam")</label>
                                        </DisplayTemplate>
                                    </DataGridAggregate>
                                    <DataGridAggregate Field="@nameof(Entity.OrderLine.VatAmnt)" Aggregate="DataGridAggregateType.Sum" DisplayFormat="{0:N2}" />
                                    <DataGridAggregate Field="@nameof(Entity.OrderLine.Total)" Aggregate="DataGridAggregateType.Sum" DisplayFormat="{0:N2}" />

                                </DataGridAggregates>
                                <DataGridColumns>
                                    <DataGridColumn Field="@nameof(Entity.OrderLine.Code)" Caption="Stok Kodu"/>
                                    <DataGridColumn Field="@nameof(Entity.OrderLine.Name)" Caption="StokAdı" />
                                    <DataGridColumn Field="@nameof(Entity.OrderLine.Amount)" Caption="Miktar" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                                    <DataGridColumn Field="@nameof(Entity.OrderLine.Unit)" Caption="Birim" />
                                    <DataGridColumn Field="@nameof(Entity.OrderLine.Price)" Caption="Fiyat" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                                    <DataGridColumn Field="@nameof(Entity.OrderLine.Vat)" Caption="Vergi" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                                    <DataGridColumn Field="@nameof(Entity.OrderLine.VatAmnt)" Caption="Vergi Tutarı" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                                    <DataGridColumn Field="@nameof(Entity.OrderLine.Total)" Caption="Tutar" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                                </DataGridColumns>
                            </DataGrid>
                        }
                    </DetailRowTemplate>
                </DataGrid>
            }

            else
            {
                <label>@message</label>
            }
        </ErrorBoundary>
    </div>
</div>

@code {
    private ListPage<Order> OrderList { get; set; }
    [Parameter] public int state { get; set; }
    private string message = "Bekleyen Siparişler Sunucudan Alınıyor.";
    HttpClient httpClient = new HttpClient();
    private int pageSize = 10;
    private DateTime startDate = DateTime.Now.AddMonths(-1).Date;
    private DateTime endDate = DateTime.Now;
    private DataGrid<Order> listGrid;
    private bool firstData;
    private async Task OnReadData(DataGridReadDataEventArgs<Order> e)
    {
        if(!firstData)
        {
            HttpResponseMessage jsondata = await httpClient.GetAsync($"/api/Order/GetOrdersPage?id={_userManager.User.AccountCode}&state={state}&firstdate={startDate.ToString("MM.dd.yyyy")}&lastdate={endDate.ToString("MM.dd.yyyy")}&currentPage={e.Page}&pageSize={pageSize}");
            if (jsondata.IsSuccessStatusCode)
            {
                OrderList = jsondata.Content.ReadFromJsonAsync<ListPage<Order>>().Result;

            }
        }
        firstData = false;
    }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    protected override async void OnParametersSet()
    {
        try
        {
            _userManager.UserManagerAsync(authenticationState.Result.User);
            if (_userManager.User.AccountCode == null || _userManager.User.AccountCode == string.Empty)
                throw new Exception("Muhasebe Hesap Kodu Boş");
            OrderList = new();

            HttpResponseMessage jsondata = await httpClient.GetAsync($"/api/Order/GetOrdersPage?id={_userManager.User.AccountCode}&state={state}&firstdate={startDate.ToString("MM.dd.yyyy")}&lastdate={endDate.ToString("MM.dd.yyyy")}&currentPage=1&pageSize={pageSize}");
            if (jsondata.IsSuccessStatusCode)
            {
                
                OrderList = jsondata.Content.ReadFromJsonAsync<ListPage<Order>>().Result;
               
                if (OrderList.Lines == null)
                    message = "Bekleyen Sipariş Bulunamadı";

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

            message = $"Sunucu Cevap Vermedi Hata Kodu\n {ex.Message}";
            StateHasChanged();
        }

    }
    protected override void OnInitialized()
    {

        using StreamReader openStream = new StreamReader("appsettings.json");
        string json = openStream.ReadToEnd();
        dynamic appsetting = JObject.Parse(json);
        httpClient.BaseAddress = appsetting.ApiService.Url;
        firstData = true;
    }
}
