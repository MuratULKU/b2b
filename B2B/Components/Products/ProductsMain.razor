@page "/products"

@using B2B.Components.NotificationService;
@using B2B.Components.Pagination;
@using B2B.Data;
@using Business.Abstract;
@using Business.Concrete;
@using DataAccess.Abstract;
@using DataAccess.Helpers.Product;
@using Entity;
@attribute [Authorize]


@inject ICategoryRepository _categoriyRepository
@inject IProductRepository _productrepository
@inject IOrderService _orderService
@inject UserManager _userManager
@inject IFirmParamService firmParamService
@inject IDocumentNoRepository _docNoService
@inject NotificationService _notification
@inject IJSRuntime _js
<div class="container">
    @if (!firmParamService.ToBoolean(16))
    {
        <div class="topbar">
         
                <div class="icon">
                    <svg color="@(view==0 ? "#007bee":"gray")" onclick="@ClickCardView" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="grid-2" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="svg-inline--fa fa-grid-2 fa-lg"><path fill="currentColor" d="M224 80c0-26.5-21.5-48-48-48H80C53.5 32 32 53.5 32 80v96c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48V80zm0 256c0-26.5-21.5-48-48-48H80c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48V336zM288 80v96c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48H336c-26.5 0-48 21.5-48 48zM480 336c0-26.5-21.5-48-48-48H336c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48V336z" class=""></path></svg>
                </div>
                <div class="icon">
                    <svg color="@(view==1 ? "#007bee":"gray")" onclick="@ClickDataView" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="list-ul" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="svg-inline--fa fa-list-ul fa-lg"><path fill="currentColor" d="M64 144a48 48 0 1 0 0-96 48 48 0 1 0 0 96zM192 64c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zM64 464a48 48 0 1 0 0-96 48 48 0 1 0 0 96zm48-208a48 48 0 1 0 -96 0 48 48 0 1 0 96 0z" class=""></path></svg>
                </div>
            
            <div class="findarea">
                <form method="get" action="products">
                    <input class="findtext" type="search" placeholder="Arama" id="filter" name="filter" />
                    <input type="hidden" id="category" name="category" value="@selectCategory" />
                    <button class="btn btn-outline-primary my-2 my-sm-0" style="border-radius:20px;"type="submit">Ara</button>
                </form>
            </div>
        </div>
        <div class="row">
            @if (dataList.Count > 0)
            {
                tableClass = "main col-md-10";
                cardClass = "col-md-4 my-2";
                <div class="leftside col-md-2">
                    <B2B.Components.PanelMenu.PanelMenu DataList="dataList" SelectItemChange="ChanegedCategory" SelectedItem="selectCategory" />
                </div>

            }
            else
            {
                tableClass = "main col-md-12";
                cardClass = "col-md-3 my-2";
            }
            <div class="@tableClass">
                @if (view == 0)
                {
                    <CascadingValue Value="this">
                        <!--parametre olarak bu class ı gönderiyoruz-->
                        <CardGridView Data="(List<Product>)pdata.Results" CardClass="@cardClass" />
                    </CascadingValue>
                }
                else if (view == 1)
                {
                    <CascadingValue Value="this">
                        <DataGridView Data="(List<Product>)pdata.Results" />
                    </CascadingValue>
                }
                else
                {
                    <p>Hatalı Görünüm Parametresi</p>
                }
                <Pager Result="@pdata" PageChanged="PagerPageChanged" PageSize="pdata.PageSize" RowCount="pdata.RowCount" OnPageSizeChanged="pageSizeOnchanged" />
            </div>
        </div>
    }
    else
    {
        <label>Bakım Modunda Sipariş Verilemez</label>
    }

</div>


@code {

    [Parameter][SupplyParameterFromQuery] public string? filter { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? category { get; set; }

    private int view;
    protected PagedResult<Product> pdata = new();
    private List<MenuItemModel>? dataList;
    private MenuItemModel selectCategory { get; set; } //silinebilir
    private string docNo;

    private string tableClass;
    private string cardClass;
    private void ClickCardView()
    {
        view = 0;
    }

    private void ClickDataView()
    {
        view = 1;

    }

    private async Task<int> pageWitdh()
    {
        var result = await _js.InvokeAsync<int>("Ulku.getDimensions");
        return result;
    }
    private void ChanegedCategory(MenuItemModel model)
    {
        pdata.RowCount = _productrepository.TotalCount(filter ?? string.Empty, model.parent == 1 ? 0 : model.id, pdata.CurrentPage, pdata.PageSize);
        pdata.Results = _productrepository.GetAll(filter ?? string.Empty, model.parent == 1 ? 0 : model.id, pdata.CurrentPage, pdata.PageSize);
    }

    private List<MenuItemModel> loadMenuItem(int parentid)
    {
        List<MenuItemModel> newItem = new();
        var d = _categoriyRepository.Get(parentid);
        if (d is not null && d.Count > 0)
        {
            foreach (var item in d)
            {
                newItem.Add(new MenuItemModel { id = item.LogicalRef, menuName = item.Name, parent = item.Parent, items = loadMenuItem(item.LogicalRef) });
            }
        }
        return newItem;
    }
    protected async override void OnInitialized()
    {
        dataList = loadMenuItem(1);
        pdata.PageSize = firmParamService.ToInteger(25);


    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

        }
        base.OnAfterRender(firstRender);
    }

    protected override async void OnParametersSet()
    {
        if (dataList != null && category != null)
        {
            selectCategory = dataList.FirstOrDefault(x => x.id == category);

        }

        view = firmParamService.ToInteger(17);
        pdata.RowCount = _productrepository.TotalCount(filter ?? string.Empty, selectCategory is null ? 0 : selectCategory.id, pdata.CurrentPage, pdata.PageSize);
        pdata.Results = _productrepository.GetAll(filter ?? string.Empty, selectCategory is null ? 0 : selectCategory.id, pdata.CurrentPage, pdata.PageSize);
    }


    protected void PagerPageChanged(int page)
    {
        pdata.CurrentPage = page;
        pdata.Results = _productrepository.GetAll(filter ?? string.Empty, selectCategory is null ? 0 : selectCategory.id, pdata.CurrentPage, pdata.PageSize);
        StateHasChanged();
    }

    protected void pageSizeOnchanged(int pageSize)
    {
        pdata.PageSize = pageSize;
        pdata.Results = _productrepository.GetAll(filter ?? string.Empty, selectCategory is null ? 0 : selectCategory.id, pdata.CurrentPage, pdata.PageSize);
    }

    //ürün eklendiği zaman sepete ekleme işi burdan yapılacak
    //child componentden çağrılıyor....
    public void AddOrder(Product product, double amount, double price)
    {
        if (product != null)
        {
            if (docNo == null || docNo == string.Empty)
            {
                var basket = _orderService.GetAll(_userManager.User.Id).FirstOrDefault(x => x.Send == false);
                if (basket == null)
                {
                    docNo = _docNoService.GetDocNo(1).DocNo.ToString();
                }
                else
                {
                    docNo = basket.DocNo.ToString();
                }
            }

            _orderService.AddProduct(_userManager.User, product, amount, price, docNo);
            _notification.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ürün Sepete Eklendi", Detail = "", Duration = 5000 });

        }
        else
        {
            _notification.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Hata", Detail = "Ürün Boş Sepete Eklenenmedi", Duration = 5000 });
        }
    }

    private void keyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
            tryFilter();
    }

    private void tryFilter()
    {
        pdata.RowCount = _productrepository.TotalCount(filter ?? string.Empty, selectCategory is null ? 0 : selectCategory.id, pdata.CurrentPage, pdata.PageSize);
        PagerPageChanged(0);
    }
}


