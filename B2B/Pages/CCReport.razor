@page "/paymentreport"
@page "/paymentreport/{id:guid}"
@using Business.Abstract
@using CoreUI.Components.DataGrid
@using CoreUI.Components.NotificationService
@using Entity
@using _3DPayment
@using _3DPayment.Request
@inject IPaymentService paymentService
@inject IVirtualPosService virtualPosService
@inject IPaymentProviderFactory paymentProviderFactory
@inject ICompanyService companyService
@inject NotificationService notification

@attribute [Authorize]
<div class="container">
    <div class="row">
        <div class="col-sm-3">
            <div class="col-sm-6">
                <label>İlk Tarih</label>
                <input type="date" @bind="@firstDate" class="form-control" />
            </div>
        </div>
        <div class="col-sm-3">
            <div class="col-sm-6">
                <label>Son Tarih</label>
                <input type="date" @bind="@lastDate" class="form-control" />
            </div>
        </div>
        <div class="col-sm-2">
            <input class="form-control btn btn-success" type="submit" onclick="@(()=>GetExtre(0))" />
        </div>
    </div>
    <div>
        <DataGrid TItem="PaymentTransaction" Items="paymentList" Pager RowCount="RowsCount" RowsPerPage="ChangedRowPerPage"
                  SelectedItemChanged="selectedItemChange" TotalCount="TotalCount" SelectedPageChange="selectPageChange">
            <Columns>
                <Column Caption="Tarih" Field="@nameof(PaymentTransaction.CreateDate)" Width="100" />
                <Column Caption="Banka Adı" Width="100">
                    <CellTemplate>
                        @context.Item.VirtualPos.Name
                    </CellTemplate>
                </Column>
                <Column Caption="Tutar" Field="@nameof(PaymentTransaction.TotalAmount)" Width="100" TextAlign="TextAlignmet.Right" />
                <Column Caption="KK Sahibi" Field="@nameof(PaymentTransaction.CardHolderName)" Width="200" />
                <Column Caption="KK No" Field="@nameof(PaymentTransaction.MaskedCardNumber)" Width="150" />
                <Column Caption="Banka Mesajı" Field="@nameof(PaymentTransaction.BankErrorMessage)" Width="200" />
                <Column Caption="Ödeme Tarihi" Field="@nameof(PaymentTransaction.PaidDate)" Width="100" />
                <Column Caption="Banka Cevabı" Field="@nameof(PaymentTransaction.Status)" Width="150" />
            </Columns>
            <DetailRowTemplate>

                <table>
                    <thead>
                        <tr>
                            <th>İşlem No</th>
                            <th>Referans No</th>
                            <th>Kullanıcı Adı</th>
                            <th>Şirket</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td width="250px">@paymentTransaction.TransactionNumber</td>
                            <td width="200px">@paymentTransaction.ReferenceNumber</td>
                            <td width="200px">@paymentTransaction.User.Username</td>
                            <td width="200px">@paymentTransaction.Company.Name</td>
                        </tr>
                    </tbody>
                </table>

            </DetailRowTemplate>
            <ButtonRowTemplate>
                <input class="btn btn-primary" value="Kontrol" disabled="@(paymentTransaction == null?true:false)" onclick="@CheckPayment" />
            </ButtonRowTemplate>
        </DataGrid>
    </div>
</div>

@code {
    [Parameter] public Guid id { get; set; } = default!;
    private DateTime? firstDate { get; set; }
    private DateTime? lastDate { get; set; }
    private PaymentTransaction paymentTransaction { get; set; }
    private List<PaymentTransaction> paymentList { get; set; } = default!;
    private int RowsCount { get; set; } = 10;
    private int TotalCount;
    private Company company { get; set; } = default!;
    private int CurrentPage = 0;

    protected async override void OnInitialized()
    {
        firstDate = DateTime.Now.Date.AddDays(-30);
        lastDate = DateTime.Now.Date.AddDays(1).AddSeconds(-1);
        GetExtre(CurrentPage);

    }

    private void ChangedRowPerPage(int rowCount)
    {
        RowsCount = rowCount;
        GetExtre(0);
    }

    private void selectPageChange(int page)
    {

        GetExtre(page);

    }

    private void selectedItemChange(PaymentTransaction Transaction)
    {
        paymentTransaction = Transaction;
    }

    private async void GetExtre(int _currentPage)
    {

        if (id != Guid.Empty)
        {
            company = await companyService.GetByUserId(id);
            TotalCount = await paymentService.GetCompanyTotalCount(company.Id, firstDate.Value, lastDate.Value);
            paymentList = await paymentService.GetPaymentTransaction(company.Id, firstDate.Value, lastDate.Value, _currentPage, RowsCount);

        }
        else
        {
            TotalCount = await paymentService.GetTotalCount(firstDate.Value, lastDate.Value);
            paymentList = await paymentService.GetFull(firstDate.Value, lastDate.Value, _currentPage, RowsCount);


        }

    }

    private async void CheckPayment()
    {
        try
        {
            VirtualPos virtualPos = await virtualPosService.GetVirtualPosAsync(paymentTransaction.VirtualPosId);
            PaymentDetailRequest paymentDetailRequest = new()
                {
                    CurrencyIsoCode = "949",
                    Amount = paymentTransaction.TotalAmount,
                    TransactionId = paymentTransaction.TransactionNumber,
                    OrderNumber = paymentTransaction.OrderNumber.ToString(),
                    BankParameters = virtualPos.VirtualPosParameters.ToDictionary(key => key.Key, value => value.Value),
                    BankName = (_3DPayment.BankNames)Enum.Parse(typeof(_3DPayment.BankNames), virtualPos.BankCard.SystemName)
                };
            IPaymentProvider provider = paymentProviderFactory.Create((VirtualPosSystem)virtualPos.VirtualPosSystem);
            var result = await provider.PaymentDetailRequest(paymentDetailRequest);
            if (result.Paid)
            {
                paymentTransaction.Status = PaymentStatus.Paid;
                paymentTransaction.PaidDate = result.PaidDate;
                if (result.CardNumber != null && result.CardNumber != string.Empty)
                    paymentTransaction.MaskedCardNumber = result.CardNumber;
                paymentTransaction.BankErrorMessage = result.BankMessage;
                await paymentService.Update(paymentTransaction);
            }
            else
            {
                paymentTransaction.Status = PaymentStatus.Failed;
                paymentTransaction.BankErrorMessage = result.ErrorMessage;
                await paymentService.Update(paymentTransaction);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            notification.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Hata", Detail = ex.Message, Duration = 5000 });
        }

        
    }
}
