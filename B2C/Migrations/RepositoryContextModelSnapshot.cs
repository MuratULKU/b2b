// <auto-generated />
using System;
using DataAccess.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace B2C.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("NOCASE")
                .HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Entity.BankCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BankCode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseCommonPaymentPage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BankCode")
                        .IsUnique();

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("Entity.CardBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CardBrands");
                });

            modelBuilder.Entity("Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("LogicalRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Parent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entity.CharAsgn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CharCodeCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharCodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CharCodeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CharValCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharValId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CharValName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("LogicalRef")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharCodeId");

                    b.HasIndex("CharValId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("CharAsgns");
                });

            modelBuilder.Entity("Entity.CharCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CSetCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("LogiclRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CharCodes");
                });

            modelBuilder.Entity("Entity.CharSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("LogicalRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CharSets");
                });

            modelBuilder.Entity("Entity.CharVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharCodeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("LogicalRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharCodeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CharVals");
                });

            modelBuilder.Entity("Entity.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirmExecutiveName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirmExecutiveSurName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MailAdress")
                        .HasColumnType("TEXT");

                    b.Property<string>("MailAdress2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Town")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("VKN")
                        .HasColumnType("TEXT");

                    b.Property<string>("VatOffice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Entity.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelNo1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelNo2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Entity.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("BankCardId")
                        .HasColumnType("TEXT");

                    b.Property<int>("BrandCode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CampaignCard")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CardBrandId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ManufacturerCard")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isBusiness")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BankCardId");

                    b.HasIndex("CardBrandId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Entity.CreditCardInstallment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Business")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreditCardId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Installment")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("InstallmentRate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId");

                    b.ToTable("CreditCardInstallments");
                });

            modelBuilder.Entity("Entity.CreditCardPrefix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BankCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrandCode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Business")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreditCardId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefix")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isInstallment")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Prefix")
                        .IsUnique();

                    b.ToTable("CreditCardPrefixes");
                });

            modelBuilder.Entity("Entity.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrencyName = "Türk Lirası",
                            CurrencySymbol = "TL"
                        });
                });

            modelBuilder.Entity("Entity.DocumentNo", b =>
                {
                    b.Property<int>("DocType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefix")
                        .HasColumnType("TEXT");

                    b.HasKey("DocType");

                    b.ToTable("DocumentNo");

                    b.HasData(
                        new
                        {
                            DocType = 1,
                            DocNo = 1,
                            Prefix = ""
                        });
                });

            modelBuilder.Entity("Entity.FirmDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("InfoType")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("LData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("LineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProtuctId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FirmDocs");
                });

            modelBuilder.Entity("Entity.FirmParam", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("No")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Value")
                        .HasColumnType("BLOB");

                    b.HasKey("Key");

                    b.HasIndex("No")
                        .IsUnique();

                    b.ToTable("FirmParams");
                });

            modelBuilder.Entity("Entity.OrdFiche", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ApprovingUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientCode")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date_")
                        .HasColumnType("TEXT");

                    b.Property<string>("Docode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Explanation")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FicheNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("GrossTotal")
                        .HasColumnType("REAL");

                    b.Property<int>("LogicalRef")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Send")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalDiscounted")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalVat")
                        .HasColumnType("REAL");

                    b.Property<short>("TrCode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("OrdFiches");
                });

            modelBuilder.Entity("Entity.OrdLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<double>("AvailableStock")
                        .HasColumnType("REAL");

                    b.Property<int>("ClientRef")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date_")
                        .HasColumnType("TEXT");

                    b.Property<double>("Discper")
                        .HasColumnType("REAL");

                    b.Property<double>("Distdisc")
                        .HasColumnType("REAL");

                    b.Property<short>("LineNo")
                        .HasColumnType("INTEGER");

                    b.Property<short>("LineType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Logicalref")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("OrdFicheId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StockRef")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.Property<short>("TrCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<double>("UomRef")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<double>("UsRef")
                        .HasColumnType("REAL");

                    b.Property<double>("Vat")
                        .HasColumnType("REAL");

                    b.Property<double>("VatAmnt")
                        .HasColumnType("REAL");

                    b.Property<double>("VatMatrah")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrdFicheId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdLine");
                });

            modelBuilder.Entity("Entity.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("BankRequest")
                        .HasColumnType("TEXT");

                    b.Property<string>("BankResponse")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardPrefix")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Explanation")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExtraInstallment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Installment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaskedCardNumber")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIpAddress")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VirtualPosId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.HasIndex("VirtualPosId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("Entity.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Cardref")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("IncVat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Logicalref")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Priorty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceLists");
                });

            modelBuilder.Entity("Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<short>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CharSetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keyword1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keyword2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keyword3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keyword4")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keyword5")
                        .HasColumnType("TEXT");

                    b.Property<int>("LogicalRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<string>("Name2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name4")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProducerCode")
                        .HasColumnType("TEXT");

                    b.Property<double?>("SellVat")
                        .HasColumnType("REAL");

                    b.Property<string>("SpeCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeCode2")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeCode3")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeCode4")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeCode5")
                        .HasColumnType("TEXT");

                    b.Property<string>("StGrupCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit1")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Unit1rate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Unit2rate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit3")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Unit3rate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UomRef")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsRef")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Vat")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CharSetId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entity.ProductAmount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<double>("OnHand")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StockRef")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAmounts");
                });

            modelBuilder.Entity("Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f198b4f-2200-4249-955d-fbc559764328"),
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(762),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            RoleName = "Admin",
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(769),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758")
                        },
                        new
                        {
                            Id = new Guid("f660d7f7-bc27-4f0e-b440-98bbac21fa63"),
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(775),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            RoleName = "User",
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(775),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758")
                        },
                        new
                        {
                            Id = new Guid("d47fc119-b2f0-420d-9b9f-d79201c2a7bc"),
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(776),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            RoleName = "B2C",
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(777),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758")
                        },
                        new
                        {
                            Id = new Guid("9683a79d-c789-4005-9b65-12f234cbb842"),
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(777),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            RoleName = "Managment",
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(778),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758")
                        },
                        new
                        {
                            Id = new Guid("3209ed92-599d-4e56-8086-c492811dc997"),
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(779),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            RoleName = "Payment",
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(779),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758")
                        },
                        new
                        {
                            Id = new Guid("b5529d62-5473-4665-a816-9528e188876f"),
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(780),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            RoleName = "Dashboard",
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(780),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758")
                        },
                        new
                        {
                            Id = new Guid("a11a94c2-5c32-4c49-a2b3-cd2eec4d837c"),
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(791),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            RoleName = "UserReport",
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(791),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758")
                        },
                        new
                        {
                            Id = new Guid("cfdc543f-88e3-42e1-a0f9-a8d03b5ee0c4"),
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(792),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            RoleName = "Bank",
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(792),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758")
                        },
                        new
                        {
                            Id = new Guid("4e3d1a2b-23d8-414b-8dc8-322161c82b92"),
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(793),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            RoleName = "Sales",
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(793),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758")
                        });
                });

            modelBuilder.Entity("Entity.ShipAdress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Inchange")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ShipAdresses");
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Discount")
                        .HasColumnType("REAL");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            AccountCode = "",
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(810),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            Email = "murat@ulkubilgisayar.com",
                            Password = "Admin",
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(810),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("Entity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            RoleId = new Guid("2f198b4f-2200-4249-955d-fbc559764328"),
                            CreateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(823),
                            CreateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758"),
                            Id = new Guid("93ab20a8-c9d1-4deb-b822-8fcdc820ca05"),
                            UpdateDate = new DateTime(2025, 1, 29, 11, 58, 35, 287, DateTimeKind.Local).AddTicks(823),
                            UpdateUser = new Guid("f040cddf-c773-424f-97e4-8f480520d758")
                        });
                });

            modelBuilder.Entity("Entity.VirtualPos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountCode")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BankCardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CardBrandId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SinglePayment")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankCardId");

                    b.ToTable("VirtualPos");
                });

            modelBuilder.Entity("Entity.VirtualPosParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UpdateUser")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VirtualPosId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VirtualPosId");

                    b.ToTable("VirtualPosParameters");
                });

            modelBuilder.Entity("Entity.CharAsgn", b =>
                {
                    b.HasOne("Entity.CharCode", "CharCode")
                        .WithMany()
                        .HasForeignKey("CharCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.CharVal", "CharVal")
                        .WithMany()
                        .HasForeignKey("CharValId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Product", "Product")
                        .WithMany("CharAsgn")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharCode");

                    b.Navigation("CharVal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entity.CharVal", b =>
                {
                    b.HasOne("Entity.CharCode", "CharCode")
                        .WithMany("CharVals")
                        .HasForeignKey("CharCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharCode");
                });

            modelBuilder.Entity("Entity.CreditCard", b =>
                {
                    b.HasOne("Entity.BankCard", "Bank")
                        .WithMany()
                        .HasForeignKey("BankCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.CardBrand", "CardBrand")
                        .WithMany()
                        .HasForeignKey("CardBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("CardBrand");
                });

            modelBuilder.Entity("Entity.CreditCardInstallment", b =>
                {
                    b.HasOne("Entity.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("Entity.FirmDoc", b =>
                {
                    b.HasOne("Entity.Product", null)
                        .WithMany("firmDocs")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Entity.OrdFiche", b =>
                {
                    b.HasOne("Entity.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.OrdLine", b =>
                {
                    b.HasOne("Entity.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.OrdFiche", null)
                        .WithMany("Lines")
                        .HasForeignKey("OrdFicheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entity.PaymentTransaction", b =>
                {
                    b.HasOne("Entity.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.VirtualPos", "VirtualPos")
                        .WithMany()
                        .HasForeignKey("VirtualPosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");

                    b.Navigation("VirtualPos");
                });

            modelBuilder.Entity("Entity.PriceList", b =>
                {
                    b.HasOne("Entity.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Product", "Product")
                        .WithMany("PriceLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entity.Product", b =>
                {
                    b.HasOne("Entity.CharSet", "CharSet")
                        .WithMany()
                        .HasForeignKey("CharSetId");

                    b.Navigation("CharSet");
                });

            modelBuilder.Entity("Entity.ProductAmount", b =>
                {
                    b.HasOne("Entity.Product", "Product")
                        .WithMany("ProductAmounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entity.ShipAdress", b =>
                {
                    b.HasOne("Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.HasOne("Entity.Company", null)
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Entity.UserRole", b =>
                {
                    b.HasOne("Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.VirtualPos", b =>
                {
                    b.HasOne("Entity.BankCard", "BankCard")
                        .WithMany()
                        .HasForeignKey("BankCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankCard");
                });

            modelBuilder.Entity("Entity.VirtualPosParameter", b =>
                {
                    b.HasOne("Entity.VirtualPos", "VirtualPos")
                        .WithMany("VirtualPosParameters")
                        .HasForeignKey("VirtualPosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualPos");
                });

            modelBuilder.Entity("Entity.CharCode", b =>
                {
                    b.Navigation("CharVals");
                });

            modelBuilder.Entity("Entity.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entity.OrdFiche", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Entity.Product", b =>
                {
                    b.Navigation("CharAsgn");

                    b.Navigation("PriceLists");

                    b.Navigation("ProductAmounts");

                    b.Navigation("firmDocs");
                });

            modelBuilder.Entity("Entity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Entity.User", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("Entity.VirtualPos", b =>
                {
                    b.Navigation("VirtualPosParameters");
                });
#pragma warning restore 612, 618
        }
    }
}
