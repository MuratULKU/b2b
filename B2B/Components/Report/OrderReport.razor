@page "/report/{state:int}"
@using Business.Abstract;
@using Business.Concrete;
@using System.Text.Json;
@using Newtonsoft.Json.Linq;
@attribute [Authorize]
@inject UserManager _userManager
<div class="container">
    <div>
        @if (OrderList != null && OrderList.IsCompleted)
        {
            <DataGrid TItem="Entity.Order"
                      Data="OrderList.Result"
                      DetailRowStartsVisible="false"
                            ShowPager>

            <DataGridColumns>
                <DataGridColumn Field="@nameof(Entity.Order.FicheNo)" Caption="Fiş No" />
                <DataGridColumn Field="@nameof(Entity.Order.Date_)" Caption="Tarih" />
                <DataGridColumn Field="@nameof(Entity.Order.GrossTotal)" Caption="Toplam" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                <DataGridColumn Field="@nameof(Entity.Order.TotalVat)" Caption="Vergi" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                <DataGridColumn Field="@nameof(Entity.Order.Total)" Caption="Genel Toplam" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
            </DataGridColumns>
            <DetailRowTemplate>
                @{
                        var detail = (context as Entity.Order).Lines;
                        <DataGrid TItem="Entity.OrderLine"
                                  Data="detail">
                            <DataGridAggregates>
                                <DataGridAggregate Field="@nameof(Entity.OrderLine.Vat)" Aggregate="DataGridAggregateType.None" Context="detail">
                                    <DisplayTemplate>
                                        <label style="font-weight: bold;">@($"Toplam")</label>
                                    </DisplayTemplate>
                                </DataGridAggregate>
                                <DataGridAggregate Field="@nameof(Entity.OrderLine.VatAmnt)" Aggregate="DataGridAggregateType.Sum" DisplayFormat="{0:N2}" />
                                <DataGridAggregate Field="@nameof(Entity.OrderLine.Total)" Aggregate="DataGridAggregateType.Sum" DisplayFormat="{0:N2}" />

                            </DataGridAggregates>
                            <DataGridColumns>
                                <DataGridColumn Field="@nameof(Entity.OrderLine.Code)" Caption="Stok Kodu" />
                                <DataGridColumn Field="@nameof(Entity.OrderLine.Name)" Caption="StokAdı" />
                                <DataGridColumn Field="@nameof(Entity.OrderLine.Amount)" Caption="Miktar" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                                <DataGridColumn Field="@nameof(Entity.OrderLine.Unit)" Caption="Birim" />
                                <DataGridColumn Field="@nameof(Entity.OrderLine.Price)" Caption="Fiyat" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                                <DataGridColumn Field="@nameof(Entity.OrderLine.Vat)" Caption="Vergi" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                                <DataGridColumn Field="@nameof(Entity.OrderLine.VatAmnt)" Caption="Vergi Tutarı" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                                <DataGridColumn Field="@nameof(Entity.OrderLine.Total)" Caption="Tutar" TextAlignment="TextAlignment.End" DisplayFormat="{0:N2}" />
                            </DataGridColumns>
                        </DataGrid>
                    }
                </DetailRowTemplate>
            </DataGrid>
        }
        else
        {
            <label>@message</label>
        }
    </div>
</div>

@code {
    private Task<List<Entity.Order>> OrderList { get; set; }
    [Parameter] public int state { get; set; }
    private string message = "Bekleyen Siparişler Sunucudan Alınıyor.";
    protected override async void OnParametersSet()
    {
        try
        {
            if (_userManager.User.AccountCode == null || _userManager.User.AccountCode == string.Empty)
                throw new Exception("Muhasebe Hesap Kodu Boş");
            HttpClient httpClient = new HttpClient();
            using StreamReader openStream = new StreamReader("appsettings.json");
            string json = openStream.ReadToEnd();
            dynamic appsetting = JObject.Parse(json);
            httpClient.BaseAddress = appsetting.ApiService.Url;
            HttpResponseMessage jsondata = await httpClient.GetAsync($"/api/order/{_userManager.User.AccountCode}/{state}/01.01.2023/12.31.2023");
            if (jsondata.IsSuccessStatusCode)
            {
                OrderList = jsondata.Content.ReadFromJsonAsync<List<Entity.Order>>();
                if (OrderList == null)
                    message = "Bekleyen Sipariş Bulunamadı";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

            message = $"Sununu Cevap Vermedi Hata Kodu\n {ex.Message}";
            StateHasChanged();
        }

    }
    protected override async void OnInitialized()
    {

    }
}
