@page "/login"
@page "/login/{returnUrl}"
@using Business.Concrete
@using Entity
@using B2B.Data

@inject ILogger<Login> _logger;
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject UserManager _userManager
@inject UserRoleManager _userRoleManager

<style>

    .content-center {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
    }

    .card {
        width: 100%;
        max-width: 500px;
        margin: 20px;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #ffffff;
    }

    .header {
        text-align: center;
        margin-bottom: 20px;
    }

        .header label {
            font-size: 24px;
            font-weight: bold;
            color: #333;
        }

    .error-message {
        color: red;
        font-size: 14px;
        text-align: center;
        margin-top: 10px;
    }

    .form-input {
        margin-bottom: 15px;
    }

    .entryarea {
        position: relative;
        width: 100%;
    }

    input[type="text"], input[type="password"] {
        width: 100%;
        padding: 12px;
        margin-top: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 14px;
        color: #333;
        background-color: #f9f9f9;
    }

    .labelline {
        position: absolute;
        top: -10px;
        left: 10px;
        font-size: 12px;
        color: #888;
        background-color: #fff;
        padding: 0 5px;
    }

    .footer {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .btn-success {
        background-color: #28a745;
        border: none;
        padding: 10px 20px;
        color: #fff;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

        .btn-success:hover {
            background-color: #218838;
        }
</style>


<form method="post" onsubmit="@entryClick" onkeypres="@OnKeyPress">
    <div class="content-center">
        <div class="card shadow" style="max-width:500px">
            <div class="header content-center">
                <label>Kullanıcı Girişi</label>
                @if (!string.IsNullOrEmpty(mymarkup))
                {
                    <div class="error-message">@mymarkup</div>
                }
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="form-input" style="width:500px; min-width:250px;">
                        <div class="entryarea">
                            <input type="text" required @bind="model.Username" name="UserName" />
                            <div class="labelline">Mail Adresinizi Girin</div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-input" style="width:500px; min-width:250px;">
                        <div class="entryarea">
                            <input type="password" required @bind="model.Password" name="Password" />
                            <div class="labelline">Şifre</div>
                        </div>
                    </div>
                </div>
                <div class="content-center footer">
                    <input type="submit" class="btn btn-success" style="min-width:50px;" value="Giriş" />
                </div>
            </div>
        </div>
    </div>
</form>

@code {
    private ElementReference submitButton;
    private string? mymarkup;
    private Model model = new();

    [Parameter]
    public string? returnUrl { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }



    private class Model
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await submitButton.FocusAsync();
            await entryClick();
        }
    }

    private async Task entryClick()
    {
        await Authenticate();
    }

    private async Task Authenticate()
    {
        mymarkup = null; // Clear any previous error message
        Entity.User user = await _userManager.GetUser(model.Username, model.Password);
        if (user == null)
        {
            mymarkup = "Hatalı Kullanıcı veya Şifre";
            _logger.LogCritical($"Failed login attempt for user {model.Username}");
            return;
        }

        List<UserRole> roles = await _userRoleManager.GetAll(user.Id);
        string[] roleNames = roles.Select(r => r.Role.RoleName).ToArray();

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = user.Username,
                Role = roleNames,
                UserId = user.Id
            });

        _logger.LogInformation($"User {user.Username} logged in successfully");




        navManager.NavigateTo($"/{returnUrl ?? ""}", true);
    }
}
