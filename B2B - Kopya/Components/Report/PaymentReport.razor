@page "/paymentreport"
@using B2B.Components.Login;
@using Business.Abstract;
@using Business.Concrete;

@using Entity;
@using System.Text;
@using SendEMail;
@inject IPaymentService paymentRepository
@inject IFirmParamService firmParam
@inject IOrderService orderService
@inject UserManager userService

@attribute [Authorize]
<div class="container">
    <div>
        <div style="display:flex;">
            <div style="display:flex;">
                <label style="margin:auto;margin-right:20px;">İlk Tarih</label>
                <DateEdit Style="width:150px;" @bind-Date="startDate" />
            </div>
            <div style="display:flex;margin-right:20px;margin-left: 50px;">
                <label style="margin:auto;margin-right:20px;">Son Tarih</label>
                <DateEdit Style="width:150px;" @bind-Date="endDate" />
            </div>
            <div>
                <button class="btn btn-outline-primary my-2 my-sm-0" style="border-radius:20px;" type="submit" onclick="@OnParametersSet">Sorgula</button>
            </div>
        </div>
        <DataGrid TItem="PaymentTransaction"
                  Data="paymentTransactionList"
                  @bind-SelectedRow="@SelectedPaymentTrans"
                  FixedColumns
                        ShowPager PageSize="10">
            <DataGridColumns>
                <DataGridCommandColumn />
                <DataGridColumn Width="100px" Field="@nameof(PaymentTransaction.CreateDate)" Caption="Tarih" >
                    <DisplayTemplate>
                        @(context.CreateDate.ToString("dd.MM.yyyy"))
                    </DisplayTemplate>
                    </DataGridColumn>
                <DataGridColumn Width="160px" Field="@nameof(PaymentTransaction.MaskedCardNumber)" Caption="Kredi Kartı No" />
                <DataGridColumn Width="160px" Field="@nameof(PaymentTransaction.CardHolderName)" Caption="Ad Soyad" />
                <DataGridColumn Width="50px" Field="@nameof(PaymentTransaction.Installment)" Caption="Taksit" TextAlignment="TextAlignment.End" />
                <DataGridColumn Width="150px" Field="@nameof(PaymentTransaction.TotalAmount)" Caption="Tutar"  TextAlignment="TextAlignment.End" DisplayFormat="{0:C}"/>
                <DataGridColumn Width="auto" Field="@nameof(PaymentTransaction.BankErrorMessage)" Caption="Hata Mesajı" />
                <DataGridColumn Width="50px" Field="@nameof(PaymentTransaction.Status)" Caption="Durum" />
                <DataGridColumn Width="150px" Field="@nameof(PaymentTransaction.Explanation)" Caption="Açıklama" />
            </DataGridColumns>
            <ButtonRowTemplate>
                <Button Color="Blazorise.Color.Success" Clicked="dekontTahsilat" Disabled="(SelectedPaymentTrans is null || SelectedPaymentTrans.Status != PaymentStatus.Paid )">Tahsilat Makbuzu</Button>
            </ButtonRowTemplate>
        </DataGrid>
        @if (SelectedPaymentTrans != null)
        {
            <Modal @ref="modalRef" Closing="@OnModalClosing">
                <ModalContent Centered>
                <ModalHeader>
                    <ModalTitle>Sanal Pos Tahsilat Makbuzu</ModalTitle>
                </ModalHeader>
                <ModalBody>
                    <div class="container">
                        <div class="row">
                            <div class="col-md-5">
                                İşlem Onay Numarası
                            </div>
                            <div class="col-7">
                                @SelectedPaymentTrans.ReferenceNumber
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-5">
                                Kart Numarası
                            </div>
                            <div class="col-md-7">
                                @SelectedPaymentTrans.MaskedCardNumber
                            </div>
                        </div>
                    </div>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Blazorise.Color.Secondary" Clicked="@CloseModal">Vazgeç</Button>
                    <Button Color="Blazorise.Color.Primary" Clicked="@TryCloseModal">Mail Gönder</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
        }
    </div>
</div>
@code {

    private List<PaymentTransaction> paymentTransactionList;
    private PaymentTransaction SelectedPaymentTrans;
    private Modal? modalRef;
    string htmlstring;
    private bool cancelClose;
    PaymentTransaction payment;
    private DateTime startDate = DateTime.Now.AddMonths(-1).Date;
    private DateTime endDate = DateTime.Now;
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    protected override void OnParametersSet()
    {
        userService.UserManagerAsync(authenticationState.Result.User);
        paymentTransactionList = paymentRepository.GetUserId(userService.User.Id, startDate, endDate).Result.Data;
    }
    private void dekontTahsilat()
    {
        modalRef.Show();
    }
    private async void sendMail()
    {
        var param = firmParam.Get(1);
        var builder = new StringBuilder();
        using (var reader = System.IO.File.OpenText("Template/KKTahsilat.cshtml"))
        {
            builder.Append(reader.ReadToEnd());
        }
        payment = paymentRepository.GetByOrderNumber(SelectedPaymentTrans.OrderNumber).Result.Data;
        builder.Replace("islemturu", "Mail Order Kredi Kartı Tahsilatı");
        builder.Replace("firmaunvani", firmParam.ToString(1));
        builder.Replace("islemno", payment.ReferenceNumber);
        builder.Replace("tarih", payment.PaidDate.ToString());
        builder.Replace("carikod", userService.User.AccountCode);
        builder.Replace("cariunvan", userService.User.AccountName);
        builder.Replace("total", payment.TotalAmount.ToString());
        builder.Replace("yaziiletutar", NUmbertoString(payment.TotalAmount));
        builder.Replace("kkno", payment.MaskedCardNumber);
        builder.Replace("isim", payment.CardHolderName);
        builder.Replace("aciklama", payment.Explanation);
        builder.Replace("taksit", payment.Installment.ToString());
        builder.Replace("bankaadi", payment.BankCard.Name);
        htmlstring = builder.ToString();



        OrdFiche ordFiche = orderService.GetFiche(payment.OrderNumber);
        if (ordFiche != null)
        {
            ordFiche.Send = true;
            ordFiche.Explanation = ordFiche.Explanation ?? string.Empty; //null giderse api hata veriyor
            orderService.UpdateBasket(ordFiche);
        }
        EMailSender es = new EMailSender(firmParam);
        await es.SendEmailAsync(firmParam.ToString(7), "Kredi Kartı Tahsilat Maili", builder.ToString());
        if (firmParam.ToString(7) != userService.User.Email)
            await es.SendEmailAsync(userService.User.Email, "Kredi Kartı Tahsilat Maili", builder.ToString());

    }

    private string NUmbertoString(decimal tutar)
    {
        string sTutar = tutar.ToString("F2").Replace('.', ',');
        string lira = sTutar.Substring(0, sTutar.IndexOf(','));
        string kurus = sTutar.Substring(sTutar.IndexOf(',') + 1, 2);
        string yazi = "";

        string[] birler = { "", "BİR", "İKİ", "Üç", "DÖRT", "BEŞ", "ALTI", "YEDİ", "SEKİZ", "DOKUZ" };
        string[] onlar = { "", "ON", "YİRMİ", "OTUZ", "KIRK", "ELLİ", "ALTMIŞ", "YETMİŞ", "SEKSEN", "DOKSAN" };
        string[] binler = { "KATRİLYON", "TRİLYON", "MİLYAR", "MİLYON", "BİN", "" };

        int grupSayisi = 6;


        lira = lira.PadLeft(grupSayisi * 3, '0');

        string grupDegeri;

        for (int i = 0; i < grupSayisi * 3; i += 3)
        {
            grupDegeri = "";

            if (lira.Substring(i, 1) != "0")
                grupDegeri += birler[Convert.ToInt32(lira.Substring(i, 1))] + "YÜZ";

            if (grupDegeri == "BİRYÜZ")
                grupDegeri = "YÜZ";

            grupDegeri += onlar[Convert.ToInt32(lira.Substring(i + 1, 1))];

            grupDegeri += birler[Convert.ToInt32(lira.Substring(i + 2, 1))];

            if (grupDegeri != "")
                grupDegeri += binler[i / 3];

            if (grupDegeri == "BİRBİN")
                grupDegeri = "BİN";

            yazi += grupDegeri;
        }

        if (yazi != "")
            yazi += " TL ";

        int yaziUzunlugu = yazi.Length;

        if (kurus.Substring(0, 1) != "0")
            yazi += onlar[Convert.ToInt32(kurus.Substring(0, 1))];

        if (kurus.Substring(1, 1) != "0")
            yazi += birler[Convert.ToInt32(kurus.Substring(1, 1))];

        if (yazi.Length > yaziUzunlugu)
            yazi += " Kr.";
        else
            yazi += "SIFIR Kr.";

        return yazi;
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        e.Cancel = cancelClose
            || e.CloseReason != CloseReason.UserClosing;

        return Task.CompletedTask;
    }

    private Task TryCloseModal()
    {
        cancelClose = false;
        sendMail();
        return modalRef.Hide();
    }

    private Task CloseModal()
    {
        cancelClose = false;

        return modalRef.Hide();
    }
}
