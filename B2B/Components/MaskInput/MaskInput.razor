@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime

<input @ref="@Element" @attributes="Attributes" value="@Value" @onchange="@OnChange" id="@GetId()"
       oninput="Ulku.mask('@GetId()', '@Mask', '@Pattern', '@CharacterPattern')" />

@code{
        /// <summary>
        /// Gets a reference to the HTML element rendered by the component.
        /// </summary>
        public ElementReference Element { get; internal set; }

        /// <summary>
        /// Gets or sets the unique identifier.
        /// </summary>
        /// <value>The unique identifier.</value>
        public string UniqueID { get; set; }
        /// <summary>
        /// Gets the unique identifier.
        /// </summary>
        /// <returns>Returns the <c>id</c> attribute (if specified) or generates a random one.</returns>
        ///
        /// <summary>
        /// Specifies additional custom attributes that will be rendered by the component.
        /// </summary>
        /// <value>The attributes.</value>
        [Parameter(CaptureUnmatchedValues = true)]
        public IReadOnlyDictionary<string, object> Attributes { get; set; }
        protected string GetId()
        {
            if (Attributes != null && Attributes.TryGetValue("id", out var id) && !string.IsNullOrEmpty(Convert.ToString(@id)))
            {
                return $"{@id}";
            }

            return UniqueID;
        }

        protected override void OnInitialized()
        {
            UniqueID = Convert.ToBase64String(Guid.NewGuid().ToByteArray()).Replace("/", "-").Replace("+", "-").Substring(0, 10);
        }
        //2. class
        /// <summary>
        /// The value
        /// </summary>
        protected string _value;

        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        /// <value>The value.</value>
        [Parameter]
        public virtual string Value
        {
            get
            {
                return _value;
            }
            set
            {
                if (!EqualityComparer<string>.Default.Equals(value, _value))
                {
                    _value = value;
                }
            }
        }
        [Parameter]
        public EventCallback<string> ValueChanged { get; set; }
        [Inject]
        protected IJSRuntime JSRuntime { get; set; }
        // 2. class

        /// <summary>
        /// Handles the <see cref="E:Change" /> event.
        /// </summary>
        /// <param name="args">The <see cref="ChangeEventArgs"/> instance containing the event data.</param>

        protected async System.Threading.Tasks.Task OnChange(ChangeEventArgs args)
        {
            Value = $"{args.Value}";
            await Change.InvokeAsync(Value);
            await ValueChanged.InvokeAsync(Value);

        }

        /// <summary>
        /// Gets or sets the change.
        /// </summary>
        /// <value>The change.</value>
        [Parameter]
        public EventCallback<string> Change { get; set; }

        [Parameter]
        public long? MaxLength { get; set; }

        /// <summary>
        /// Gets or sets the mask.
        /// </summary>
        /// <value>The mask.</value>
        [Parameter]
        public string Mask { get; set; }

        /// <summary>
        /// Gets or sets the pattern that will be used to replace all invalid characters with regular expression.
        /// </summary>
        /// <value>The invalid characters pattern.</value>
        [Parameter]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or sets the pattern that will be used to match all valid characters with regular expression. If both Pattern and CharacterPattern are set CharacterPattern will be used.
        /// </summary>
        /// <value>The valid characters pattern.</value>
        [Parameter]
        public string CharacterPattern { get; set; }

        /// <summary>
        /// Handles the <see cref="E:Change" /> event.
        /// </summary>
        /// <param name="args">The <see cref="ChangeEventArgs"/> instance containing the event data.</param>

        protected override void OnAfterRender(bool firstRender)
        {
            base.OnAfterRender(firstRender);

            if (firstRender)
            {
                JSRuntime.InvokeVoidAsync("eval", $"Ulku.mask('{GetId()}', '{Mask}', '{Pattern}', '{CharacterPattern}')");

            }
        }
    
    

}