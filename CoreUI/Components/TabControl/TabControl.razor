<CascadingValue Value="this">
    <div class="btn-group" role="group">

        @foreach (TabPage tabPage in Pages)
        {
            <button type="button"
                    class="btn @GetButtonClass(tabPage)"
                    onclick=@( () => ActivatePage(tabPage) )>
                @tabPage.Text
            </button>
        }

    </div>
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;
    [Parameter]
    public EventCallback<bool> ChangedActivePage { get; set; }
   
    public TabPage ActivePage { get; set; }
    List<TabPage> Pages = new List<TabPage>();

    private async Task NotifyTabChange()
    {
        if (ChangedActivePage.HasDelegate)
        {
            // Trigger the callback and notify the parent component about the tab change
            await ChangedActivePage.InvokeAsync(true);
        }
    }
    async Task ActivatePage(TabPage page)
    {
        if (page.IsValid) // Only activate if the tab is valid
        {
            ActivePage = page;
            await NotifyTabChange(); // Notify parent component
            StateHasChanged();
        }
    }

    internal void AddPage(TabPage tabPage)
    {
        Pages.Add(tabPage);
        if (Pages.Count == 1)
            ActivePage = tabPage;
        StateHasChanged();
    }

    string GetButtonClass(TabPage page)
    {
        return page == ActivePage ? "btn-primary" : "btn-secondary";
    }

    // void ActivatePage(TabPage page)
    // {
    //     if (page.IsValid)
    //     {
    //         ActivePage = page;
    //         StateHasChanged();
    //     }
    // }
}
